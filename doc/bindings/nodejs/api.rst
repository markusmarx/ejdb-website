
.. _nodejs_api:

EJDB Nodejs API
===============

.. js:function:: EJDB.open(dbFile, [openMode], [cb])

    Open a database specified by `dbFile` using the `openMode`.
    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    If `cb` function is not provided this function will be synchronous.

    The `openMode` argument is a bitmask of the following flags:

    * `JBOREADER` Open database as reader.
    * `JBOWRITER` Open database as writer.
    * `JBOCREAT` Create new database if it not exists.
    * `JBOTRUNC` Trancated database on opening.

    :param string dbFile: The database file path.
    :param number [openMode]: Open mode. Default: `JBOWRITER | JBOCREAT`
    :param function [cb]: Callback called with error and EJDB object arguments
    :return: EJDB database instance object.


.. js:function:: EJDB.isValidOID(oid)

    Returns `true` if argument is a valid object id (OID) string.

    :param string oid: Object id
    :return: Boolean value

.. js:function:: db.close([cb])

   Close a database. If database is closed this function does nothing.

   :param function cb: Callback called with error.


.. js:function:: db.isOpen()

    Check if database is in opened state.

.. js:function:: db.ensureCollection(cname, [copts], [cb])

    Return existing collection or create new collection if it was not created before.
    Collection options `copts` are applied only for newly created collection.
    For existing collections `copts` takes no effect.

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    `copts`:

    .. code-block:: js

        {
          //Max number of cached records in shared memory segment. Default: 0
          'cachedrecords': number,

          //Estimated number of records in this collection. Default: 65535.
          'records': number,

           //If `true` the size of a database can be larger than 2GB. Default: false
          'large': false,

          //If `true` collection's records will be compressed
          // with DEFLATE compression. Default: false
          'compressed: false
        }

    :param string cname: Collection name
    :param map [copts]: Options to be used when creating the collection
    :param function [cb]: Callback called with an error argument


.. js:function:: db.dropCollection(cname, [prune=false], [cb])

    Drop the collection specified by `cname`. If `prune` set to `true` the collection data
    will be removed from disk.

    :param string cname: Collection name
    :param boolean [prune=false]: If `prune` set to `true` the collection data will be removed from disk
    :param function [cb]: Callback called with an error argument


.. js:function:: db.save(cname, jsarr, [opts={}], [cb])

    Save/update specified in `jsarr` JSON objects in the collection identified by `cname`.
    If collection with `cname` does not exists it will be created.

    Every persistent object may have a unique identifier (OID) placed in the `_id` property.
    If a saved object does not have `_id` it will be autogenerated.
    To identify and update object it should contains the `_id` property.

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    A save options `opts`:

    .. code-block:: js

        {
            //A saved object will be merged with who's
            // already persisted in db.
            merge: false
        }

    **Calling variations:**

    .. code-block:: js

        save(cname, <json object>|<Array of json objects>)
        save(cname, <json object>|<Array of json objects>, options)
        save(cname, <json object>|<Array of json objects>, cb)
        save(cname, <json object>|<Array of json objects>, options, cb)

    .. note::

        Field names of passed JSON objects may not contain `$` and `.` characters,
        error condition will be fired in this case.

    :param string cname: Collection name.
    :param array|object jsarr: Signle JSON object or array of JSON objects to save.
    :param object [opts]: Save options.
    :param function [cb]: Callback function with arguments: `(error, {Array} of OIDs of saved objects)`
    :return: An `OID` array of saved object in synchronous mode otherwise return `undefined`.

.. js:function:: db.load(cname, oid, [cb])

    Retrieve JSON object identified by OID.

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    Return JSON object or `null` if it is not found.

    :param string cname: Collection name
    :param string oid: Object identifier (OID)
    :param function [cb]: Callback function
    :return: JSON `Object` or `null` if it is not found in synchronous mode otherwise return `undefined`.


.. js:function:: db.remove(cname, oid, [cb])

    Remove JSON object identified by `oid` from the collection `cname`.

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    :param string cname: Collection name
    :param string [oid]: Object identifier (OID)
    :return: `undefined`


.. js:function:: db.find(cname, ...)

    Retrieve a set of documents matched to the specified query.
    :ref:`See the complete query language specification <ql>`

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    A callback function `cb` will be called with
    the following arguments: `error, cursor, count` where:

    * error: Error object
    * cursor: Cursor object to traverse documents found
    * count: Total number of selected records.

    **Calling variations:**

    .. code-block:: js

        find(cname, [cb])
        find(cname, qobj, [cb])
        find(cname, qobj, hints, [cb])
        find(cname, qobj, qobjarr, [cb])
        find(cname, qobj, qobjarr, hints, [cb])

    :param string cname: Collection name
    :param object [qobj]: Main JSON query object
    :param object [hints]: JSON object specifies the query :ref:`hints <qhints>`
    :param array [qobjarr]: Array of extra `OR` joined query objects
    :param function [cb]: Callback accepting arguments: `error, cursor, count`
    :return: `undefined` if `cb` is provided.
              If `cb` is not provided and `$onlycount` query hint is set returns count `number`.
              If `cb` is not provided and no `$onlycount` query hint returns `cursor` object.


.. js:function:: db.findOne(cname, ...)

    Retrieve a first found document matched to the specified query.
    :ref:`See the complete query language specification <ql>`

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    A callback function `cb` will be called with
    the following arguments: `error, object` where:

    * error: Error object
    * object: Found document or `null` if no matched documents.

    **Calling variations:**

    .. code-block:: js

        findOne(cname, [cb])
        findOne(cname, qobj, [cb])
        findOne(cname, qobj, hints, [cb])
        findOne(cname, qobj, qobjarr, [cb])
        findOne(cname, qobj, qobjarr, hints, [cb])

    :param string cname: Collection name
    :param object [qobj]: Main JSON query object
    :param object [hints]: JSON object specifies the query :ref:`hints <qhints>`
    :param array [qobjarr]: Array of extra `OR` joined query objects
    :param function [cb]: Callback accepting arguments: `error, object`
    :return: `undefined` if `cb` is provided.
              otherwise return a found `document` or `null`
              if no matched documents found.



.. js:function:: db.command(cmd, [cb])

    Execute ejdb database command.
    :ref:`See the database commands documentation <cmd>`

    Execution of this function will be `asynchronous` if `cb` is
    provided, otherwise it will be `synchronous`.

    A callback function `cb` will be called with
    the following arguments: `error, object` where:

    * error: Error object
    * object: Command execution result.

    :param json cmd: Command specification
    :param function [cb]:











