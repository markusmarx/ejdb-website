
.. _nodejs_api:

EJDB Nodejs API
===============

.. js:function:: EJDB.open(dbFile, [openMode], [cb])

    Open a database specified by `dbFile` using the `openMode`.
    Depending on `cb` parameter passed to this function will be either async or blocking.
    The `openMode` argument is a bitmask of the following flags:

    * `JBOREADER` Open database as reader.
    * `JBOWRITER` Open database as writer.
    * `JBOCREAT` Create new database if it not exists.
    * `JBOTRUNC` Trancated database on opening.

    :param string dbFile: The database file path.
    :param number openMode: Open mode. Default: `JBOWRITER | JBOCREAT`
    :param function cb: Callback called with error and EJDB object arguments
    :return: EJDB database instance object.


.. js:function:: EJDB.isValidOID(oid)

    Returns `true` if argument is a valid object id (OID) string.

    :param string oid: Object id
    :return: Boolean value

.. js:function:: db.close([cb])

   Close a database. If database is closed this function does nothing.

   :param function cb: Callback called with error.


.. js:function:: db.isOpen()

    Check if database is in opened state.

.. js:function:: db.ensureCollection(cname, [copts], [cb])

    Return existing collection or create new collection if it does't exists.
    Collection options `copts` are applied only for newly created collection.
    For existing collections `copts` takes no effect.

    `copts`:

    .. code-block:: js

        {
          //Max number of cached records in shared memory segment. Default: 0
          'cachedrecords': number,

          //Estimated number of records in this collection. Default: 65535.
          'records': number,

           //If `true` the size of a database can be larger than 2GB. Default: false
          'large': false,

          //If `true` collection's records will be compressed
          // with DEFLATE compression. Default: false
          'compressed: false
        }

    Depending on if `cb` parameter is passed this function it will be `async` or
    `blocking`.

    :param string cname: A name of collection.
    :param map copts: Options to be used when creating the collection.
    :param function cb: Callback called with an error argument.


.. js:function:: db.dropCollection(cname, [prune=false], [cb])

    Drop the collection specified by `cname`. If `prune` set to `true` the collection data
    will be removed from disk.

    :param string cname: A name of collection.
    :param boolean prune: If `prune` set to `true` the collection data will be removed from disk.
    :param function cb: Callback called with an error argument.


.. js:function:: db.save(cname, jsarr, [opts={}], [cb])

    Save/update specified in `jsarr` JSON objects in the collection identified by `cname`.
    If collection with `cname` does not exists it will be created.

    Every persistent object may have a unique identifier (OID) placed in the `_id` property.
    If a saved object does not have `_id` it will be autogenerated.
    To identify and update object it should contains the `_id` property.

    If `cb` is not provided this function will be synchronous.

    A save options `opts`:

    .. code-block:: js

        {
            //A saved object will be merged with who's
            // already persisted in db.
            merge: false
        }

    **Calling variations:**

    .. code-block:: js

        save(cname, <json object>|<Array of json objects>)
        save(cname, <json object>|<Array of json objects>, options)
        save(cname, <json object>|<Array of json objects>, cb)
        save(cname, <json object>|<Array of json objects>, options, cb)    \

    .. note::

        Field names of passed JSON objects may not contain `$` and `.` characters,
        error condition will be fired in this case.

    :param string cname: A name of collection.
    :param array|object jsarr: Signle JSON object or array of JSON objects to save.
    :param object? opts: Save options.
    :param function cb: Callback function with arguments: `(error, {Array} of OIDs of saved objects)`
    :return: An `OID` array of saved object in synchronous mode otherwise return `undefined`.

